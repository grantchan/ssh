package io.github.grantchan.sshengine.client;

import io.github.grantchan.sshengine.arch.SshMessage;
import io.github.grantchan.sshengine.common.AbstractSession;
import io.github.grantchan.sshengine.common.transport.compression.Compression;
import io.github.grantchan.sshengine.util.buffer.ByteBufIo;
import io.github.grantchan.sshengine.util.buffer.Bytes;
import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;

import javax.crypto.Cipher;
import javax.crypto.Mac;
import java.io.IOException;
import java.math.BigInteger;
import java.security.PublicKey;

public class ClientSession extends AbstractSession {

  public ClientSession(Channel channel) {
    super(channel);
  }

  @Override
  public Cipher getInCipher() {
    return getS2cCipher();
  }

  @Override
  public void setInCipher(Cipher inCipher) {
    setS2cCipher(inCipher);
  }

  @Override
  public Cipher getOutCipher() {
    return getC2sCipher();
  }

  @Override
  public void setOutCipher(Cipher outCipher) {
    setC2sCipher(outCipher);
  }

  @Override
  public int getInCipherBlkSize() {
    return getS2cCipherBlkSize();
  }

  @Override
  public void setInCipherBlkSize(int inCipherBlkSize) {
    setS2cCipherBlkSize(inCipherBlkSize);
  }

  @Override
  public int getOutCipherBlkSize() {
    return getC2sCipherBlkSize();
  }

  @Override
  public void setOutCipherBlkSize(int outCipherBlkSize) {
    setC2sCipherBlkSize(outCipherBlkSize);
  }

  @Override
  public Mac getInMac() {
    return getS2cMac();
  }

  @Override
  public void setInMac(Mac inMac) {
    setS2cMac(inMac);
  }

  @Override
  public Mac getOutMac() {
    return getC2sMac();
  }

  @Override
  public void setOutMac(Mac outMac) {
    setC2sMac(outMac);
  }

  @Override
  public int getInMacSize() {
    return getS2cMacSize();
  }

  @Override
  public void setInMacSize(int inMacSize) {
    setS2cMacSize(inMacSize);
  }

  @Override
  public int getOutMacSize() {
    return getC2sMacSize();
  }

  @Override
  public void setOutMacSize(int outMacSize) {
    setC2sMacSize(outMacSize);
  }

  @Override
  public void setInDefMacSize(int inDefMacSize) {
    setS2cDefMacSize(inDefMacSize);
  }

  @Override
  public int getOutDefMacSize() {
    return getC2sDefMacSize();
  }

  @Override
  public void setOutDefMacSize(int outDefMacSize) {
    setC2sDefMacSize(outDefMacSize);
  }

  @Override
  public Compression getInCompression() {
    return getS2cCompression();
  }

  @Override
  public void setInCompression(Compression inCompression) {
    setS2cCompression(inCompression);
  }

  @Override
  public Compression getOutCompression() {
    return getC2sCompression();
  }

  @Override
  public void setOutCompression(Compression outCompression) {
    setC2sCompression(outCompression);
  }

  /**
   * Sends the {@link SshMessage#SSH_MSG_KEXDH_INIT} message to the server
   * @param e the public key generated by client, e = g ^ x mod p, where x is the client's private
   *          key.
   */
  public void requestKexDhInit(BigInteger e) {
    ByteBuf req = createMessage(SshMessage.SSH_MSG_KEXDH_INIT);

    ByteBufIo.writeMpInt(req, e);

    logger.debug("[{}] Requesting SSH_MSG_KEXDH_INIT...", this);

    channel.writeAndFlush(req);
  }

  @Override
  public void replyAccept(String svcName) {
    throw new UnsupportedOperationException("Client is not capable of replying accept message");
  }

  /**
   * Sends the {@link SshMessage#SSH_MSG_SERVICE_REQUEST} message to the server
   */
  public void requestServiceRequest() {
    ByteBuf req = createMessage(SshMessage.SSH_MSG_SERVICE_REQUEST);

    ByteBufIo.writeUtf8(req, "ssh-userauth");

    logger.debug("[{}] Requesting SSH_MSG_SERVICE_REQUEST...", this);

    channel.writeAndFlush(req);
  }

  public void requestUserAuthRequest(String user, String service, String method) {
    ByteBuf req = createMessage(SshMessage.SSH_MSG_USERAUTH_REQUEST);

    ByteBufIo.writeUtf8(req, user);
    ByteBufIo.writeUtf8(req, service);
    ByteBufIo.writeUtf8(req, method);

    logger.debug("[{}] Requesting SSH_MSG_USERAUTH_REQUEST... username:{}, service:{}, method:{}",
        this, user, service, method);

    channel.writeAndFlush(req);
  }

  public void requestUserAuthRequest(String user, String service, String method, String algo,
                                     PublicKey pubKey) throws IOException {
    ByteBuf req = createMessage(SshMessage.SSH_MSG_USERAUTH_REQUEST);

    ByteBufIo.writeUtf8(req, user);
    ByteBufIo.writeUtf8(req, service);
    ByteBufIo.writeUtf8(req, method);
    req.writeBoolean(false);
    ByteBufIo.writeUtf8(req, algo);
    ByteBufIo.writePublicKey(req, pubKey);

    logger.debug("[{}] Requesting SSH_MSG_USERAUTH_REQUEST... " +
        "username:{}, service:{}, method:{}, algo:{}", this, user, service, method, algo);

    channel.writeAndFlush(req);
  }

  public void requestUserAuthRequest(String user, String service, String method, String algo,
                                     PublicKey pubKey, byte[] sig) throws IOException {
    ByteBuf req = createMessage(SshMessage.SSH_MSG_USERAUTH_REQUEST);

    ByteBufIo.writeUtf8(req, user);
    ByteBufIo.writeUtf8(req, service);
    ByteBufIo.writeUtf8(req, method);
    req.writeBoolean(true);
    ByteBufIo.writeUtf8(req, algo);
    ByteBufIo.writePublicKey(req, pubKey);
    ByteBufIo.writeBytes(req, sig);

    logger.debug("[{}] Requesting SSH_MSG_USERAUTH_REQUEST... " +
            "username:{}, service:{}, method:{}, algo:{}, sigature: {}", this, user, service, method, algo,
        Bytes.md5(sig));

    channel.writeAndFlush(req);
  }
}
