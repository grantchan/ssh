package io.github.grantchan.ssh.common.transport.kex;

import io.github.grantchan.ssh.common.NamedObject;
import io.github.grantchan.ssh.util.buffer.Bytes;

import javax.crypto.KeyAgreement;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.util.Objects;

public abstract class KeyExchange implements NamedObject {

  byte[] pubKey;         // public key generated by this machine
  byte[] receivedPubKey; // public key generated by peer machine, sent by peer

  KeyAgreement ka;
  private byte[] sharedKey; // secret key shared by both sides

  abstract KeySpec getKeySpec();

  public byte[] getPubKey() {
    return this.pubKey;
  }

  public byte[] getReceivedPubKey() {
    return this.receivedPubKey;
  }

  public void receivedPubKey(final byte[] key) {
    this.receivedPubKey = key;
  }

  public byte[] getSecretKey() {
    if (sharedKey != null) {
      return sharedKey;
    }

    try {
      KeyFactory kf = KeyFactory.getInstance(getName());

      KeySpec ks = Objects.requireNonNull(getKeySpec());

      ka.doPhase(kf.generatePublic(ks), true);
    } catch (NoSuchAlgorithmException | InvalidKeyException | InvalidKeySpecException e) {
      e.printStackTrace();
      return null;
    }

    byte[] k = Objects.requireNonNull(ka.generateSecret());

    int i = 0;
    while (k[i] == 0) {
      i++;
    }

    sharedKey = Bytes.last(k, k.length - i);

    return sharedKey;
  }
}
